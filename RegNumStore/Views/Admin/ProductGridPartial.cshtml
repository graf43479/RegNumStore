@using MvcContrib.UI.Grid
@using RegnumStore.Extensions
@*@model IEnumerable<Domain.Entities.Category>*@
@model RegnumStore.Models.PagedViewModel<RegnumStore.Models.ProductViewModel>

@*@{TempData["Query"] = Model.Query;}*@





@using (Html.BeginForm("DeleteProduct", "Admin", FormMethod.Post))
{    
    
    <div class="col-lg-12" style="padding: 0; margin: 10px 0 10px 0;">
        <button type="submit" class="btn btn-md btn-danger" id="remove-prod" style=""><span class="glyphicon glyphicon-remove">&nbsp;</span>Удалить выбранное</button>
    
    
    </div>
    
    
    Html.RenderPartial("Pager", Model.PagedList);

    
    @Html.Grid(Model.PagedList).Columns(column =>
{
    if (User.IsInRole("admin") || (User.IsInRole("ContentManager")))
    {
        column.Custom(a => Html.Raw("<input type='checkbox' class='reqPayment' name='resubmit' value='" + a.ProductID + "'/>")).Header(o => "<input type=\"checkbox\" id='chkHeader' />")
              .Encode(false)
              .Sortable(false)
              .HeaderAttributes(new Dictionary<string, object> { { "style", "width:20px" } });
    }



    //column.Custom(x => MvcHtmlString.Create(string.Format("<a href='{0}' data-lightbox='" + x.ProductID + "' title='" + x.ProductNumber + "'><img class='example-image-link img-responsive'   style='margin: 0 auto;' src='{1}/{2}/{3}' alt='{4}'/></a>",

    //                                                     @Url.Content("~/Content/" + Domain.Constants.PRODUCT_IMAGE_FOLDER + "/" + x.ProductID + ".jpg"),
    //                                                     Url.Content("~/Content"),
    //                                                     Domain.Constants.PRODUCT_IMAGE_FOLDER,
    //                                                     ( (System.IO.File.Exists(System.IO.Path.Combine(Server.MapPath(@Url.Content("~/Content")),
    //                                                                                                                                                 Domain.Constants.PRODUCT_IMAGE_FOLDER,
    //                                                                                                                                               x.ProductID.ToString() + ".jpg")))) != true ? "0.jpg" : x.ProductID.ToString() + ".jpg", 
    //                                                                                                                                               x.ProductID
    //                                           ))).Named("Изображение").Attributes(x =>
    //                                           {
    //                                               return new Dictionary<string, object> { { "style", "max-width: 150px" } };
    //                                           }).Sortable(false);


    column.Custom(x => MvcHtmlString.Create(string.Format("<img class='example-image-link img-responsive'   style='margin: 0 auto;' src='{0}/{1}/{2}' alt='{3}'/>",
                                                         //@Url.Content("~/Content/" + Domain.Constants.PRODUCT_IMAGE_FOLDER + "/" + x.ProductID + ".jpg"),
                                                         Url.Content("~/Content"),
                                                         Domain.Constants.PRODUCT_IMAGE_FOLDER,
                                                         ((System.IO.File.Exists(System.IO.Path.Combine(Server.MapPath(@Url.Content("~/Content")),
                                                                                                                                                     Domain.Constants.PRODUCT_IMAGE_FOLDER,
                                                                                                                                                   x.ProductID.ToString() + ".jpg")))) != true ? "0.jpg" : x.ProductID.ToString() + ".jpg",
                                                                                                                                                   x.ProductID
                                               ))).Named("Изображение").Attributes(x =>
                                               {
                                                   return new Dictionary<string, object> { { "style", "" } };
                                               }).Sortable(false);



    //column.For(x => x.ImgExt).SortColumnName("ImgExt").Named("Формат").Attributes(x =>
    //{
    //    return new Dictionary<string, object> { { "style", "text-align: center;" } };
    //});

    //column.For(x => x.Name).SortColumnName("Name").Named("Наименование товара").Attributes(x =>
    //{
    //    return new Dictionary<string, object> { { "style", "text-align: left;" } };
    //});

    //column.For(x => Html.ActionQueryLink(x.CategoryName, "Products", new { categoryId = x.SelectedCategoryID })).SortColumnName("CategoryName").Named("Категория").Attributes(x =>
    //{
    //    return new Dictionary<string, object> { { "style", "text-align: left;" }, { "title", "Просмотреть товары категории " + x.Item.CategoryName } };
    //});
    // column.For(x => x.Path).SortColumnName("Path").Named("Путь");


    column.For(x => x.Region.RegionName).SortColumnName("RegionNumber").Named("Регион");
    column.For(x => (x.StartDate != null) ? x.StartDate.ToString().Remove(10) : "").SortColumnName("StartDate").Named("Дата появления");
    column.For(x => (x.UpdateDate != null) ? x.UpdateDate.ToString().Remove(10) : "").SortColumnName("UpdateDate").Named("Дата изменения");

        

        @*column.For(x => x.IsActive).SortColumnName("IsActive").Named("Активен");
        column.For(x => x.IsDeleted).SortColumnName("IsDeleted").Named("Удален");*@

        

    column.For(x => (x.IsDisplay == true) ? Html.Raw("<i class='fa fa-check-square-o fa-2x' style='color: #8EB50C;' title='Фото " + x.ProductID + " числится отображаемым'></i>") : Html.Raw("<i class='fa fa-square-o fa-2x' title='Фото " + x.ProductID + " не отображается' style='color: red'></i>")).SortColumnName("IsDisplay").Named("Отображаемый?");

    column.For(x => (x.IsChoosen == true) ? Html.Raw("<i class='fa fa-check-square-o fa-2x' style='color: red' title='Фото " + x.ProductID + " числится избранной'></i>") : Html.Raw("<i class='fa fa-square-o fa-2x' title='Фотография " + x.ProductID + " не числится избранной' style='color: #8EB50C;'></i>")).SortColumnName("IsChoosen").Named("Избранная?");

    column.For(x => x.RegionNumber).SortColumnName("RegionNumber").Named("Регион");

    
    
    //column.For(x => x.StartDate.ToShortDateString()).SortColumnName("StartDate").Named("Дата появления");
    //column.For(x => x.UpdateDate.ToShortDateString()).SortColumnName("UpdateDate").Named("Дата изменения");



    column.Custom(x => Html.Raw("<a href = " + Url.Action("EditProduct", "Admin", new { productId = x.ProductID }) + " title='Редактировать'><i class='fa fa-pencil-square-o fa-2x'></i></a>")).Header(o => "<span class='glyphicon glyphicon-edit'> </span>").Encode(false)
                                    .Sortable(false);



    //if (User.IsInRole("admin") || (User.IsInRole("ContentManager")))
    //{
    //    column.Custom(x => Html.Raw("<a href = " + Url.Action("DeleteProduct", "Admin", new {productId = x.ProductID}) + " class='linkButton glyphicon glyphicon-remove btn-xs btn btn-danger' title='Удалить'></a>")).Named("Options").Header(o => "<span class='glyphicon glyphicon-remove'> </span>").Encode(false)
    //          .Sortable(false);
    //}



    //column.For(x => Html.RenderPartial("DeleteProductPreView", "Admin", new { productId = x.ProductID }));




    //column.For(x => Html.Partial("_CheckBoxPartial", x)).Named("Options");
}
                  ).Sort(Model.GridSortOptions).Attributes(@class => "table table-striped table-bordered table-hover table-condensed grid-style").Empty("Нет данных")
 
    
    
    Html.RenderPartial("Pager", Model.PagedList);
    
    <div class="col-lg-12" style="padding: 0; margin: 0px 0 10px 0;">
                    <button type="submit" class="btn btn-md btn-danger" id="remove-prod" style=""><span class="glyphicon glyphicon-remove">&nbsp;</span>Удалить выбранное</button>
    
    
    </div>
}


@*
<script>
    $(function () {
        $('#checker').click(function () {
            if ($(this).is(':checked')) {
                $('.foo').value = true; // attr('checked', 'checked');
            } else {
                $('.foo').value = false; //removeAttr('checked');
            }
        });
    });
</script>
            *@
            
            
            
@*<script type="text/javascript">
    $(function () {
        $(".linkButton").click(
            function (event) {
                if (!confirm('Вы уверены, что хотите удалить выбранную запись?')) return false;
                event.preventDefault();
                var link = event.target;
                var action = link.href;
                while (link.tagName != 'FORM') {
                    link = link.parentElement;
                    if (!link) {
                        return;
                    }
                }
                link.action = action;
                link.method = "POST";
                link.submit();
            });
    });

</script>*@

<script type="text/javascript">
    $(document).ready(function () {
       //alert('!!')
        $('#chkHeader').change(function () {
        
            if ($(this).is(':checked')) {
                $('.reqPayment').attr('checked', 'checked');
            } else {
                $('.reqPayment').removeAttr('checked');
            }
        });
    }); 
</script>